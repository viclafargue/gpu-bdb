#
# Copyright (C) 2021 Transaction Processing Performance Council (TPC) and/or its contributors.
# This file is part of a software package distributed by the TPC
# The contents of this file have been developed by the TPC, and/or have been licensed to the TPC under one or more contributor
# license agreements.
# This file is subject to the terms and conditions outlined in the End-User
# License Agreement (EULA) which can be found in this distribution (EULA.txt) and is available at the following URL:
# http://www.tpc.org/TPC_Documents_Current_Versions/txt/EULA.txt
# Unless required by applicable law or agreed to in writing, this software is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, and the user bears the entire risk as to quality
# and performance as well as the entire cost of service or repair in case of defect. See the EULA for more details.
#


#
# Copyright 2019 Intel Corporation.
# This software and the related documents are Intel copyrighted materials, and your use of them 
# is governed by the express license under which they were provided to you ('License'). Unless the 
# License provides otherwise, you may not use, modify, copy, publish, distribute, disclose or 
# transmit this software or the related documents without Intel's prior written permission.
# 
# This software and the related documents are provided as is, with no express or implied warranties, 
# other than those that are expressly stated in the License.
# 
#


# DEFAULT Configuration for the TPCx-AI Driver
# convenience configurations
# examples for different datastores

# Local filesystem on Windows
local_fs: &LOCAL_FS
  name: 'local_fs'
  create: 'if not exist $destination mkdir $destination'
  load: &LOCAL_FS_LOAD 'echo LOAD'
  delete: 'rm $destination'
  download: *LOCAL_FS_LOAD

# HDFS = Hadoop Distributed Filesystem
hdfs: &HDFS
  name: 'hdfs'
  create: 'hdfs dfs -mkdir -p $destination'
  load: &HDFS_LOAD 'hdfs dfs -cp $source $destination/$file'
  delete: 'hdfs dfs -rm $destination'
  download: 'hdfs dfs -copyToLocal $source $destination'

workload:
  # global definitions
  enginge_executable: &ENGINE 'lib\python-venv\Scripts\python'
  datagen_python: 'lib\python-venv\Scripts\python'
  training_template: &TRAINING_TEMPLATE '$engine $name --stage training --workdir $output $input\$file'
  serving_template: &SERVING_TEMPLATE '$engine $name --stage serving  --workdir $model $input\$file'
  training_data_url: &TRAINING_DATA_URL 'output\raw_data\training'
  serving_data_url: &SERVING_DATA_URL 'output\raw_data\serving'
  scoring_data_url: &SCORING_DATA_URL 'output\raw_data\scoring'
  # general/ benchmark-wide configuration parameters
  pdgf_home: 'lib\pdgf'
  raw_data_url: 'output\raw_data'
  delimiter: ',' # default delimiter
  usecases:
    1:
      # general
      name: '-m workload.UseCase01'
      tables:
        - 'order_entriesUC01'
      raw_data_files:
        - 'order_entriesUC01.csv'
      label_column: 'clusterId'
      # engines
      training_engine: *ENGINE
      serving_engine: *ENGINE
      # data stores
      training_datastore: *LOCAL_FS   # for storing the training data
      model_datastore: *LOCAL_FS      # for storing the trained models
      serving_datastore: *LOCAL_FS    # for storing the serving data
      output_datastore: *LOCAL_FS     # for storing the final output
      # templates
      datagen_template: 'java -jar $pdgf -ns -sf $scale_factor -s $table'
      training_template: *TRAINING_TEMPLATE
      serving_template: *SERVING_TEMPLATE
      # URLs
      training_data_url: *TRAINING_DATA_URL
      serving_data_url: *SERVING_DATA_URL
      scoring_data_url: *SCORING_DATA_URL
      model_url: 'output/model/uc01'
      output_url: 'output/output/uc01'
      scoring_output_url: 'output/scoring/uc01'
      scoring_metric: ''
    3:
      # general
      name: '-m workload.UseCase03'
      tables:
        - 'sales'
        - 'sales_tmp'
      raw_data_files:
        - 'sales.csv'
      label_column: 'Weekly_Sales'
      # engines
      training_engine: *ENGINE
      serving_engine: *ENGINE
      # data stores
      training_datastore: *LOCAL_FS   # for storing the training data
      model_datastore: *LOCAL_FS      # for storing the trained models
      serving_datastore: *LOCAL_FS    # for storing the serving data
      output_datastore: *LOCAL_FS     # for storing the final output
      # templates
      datagen_template: 'java -jar $pdgf -ns -sf $scale_factor -s $table'
      training_template: *TRAINING_TEMPLATE
      serving_template: *SERVING_TEMPLATE
      # URLs
      training_data_url: *TRAINING_DATA_URL
      serving_data_url: *SERVING_DATA_URL
      scoring_data_url: *SCORING_DATA_URL
      model_url: 'output/model/uc03'
      output_url: 'output/output/uc03'
      scoring_output_url: 'output/scoring/uc03'
      scoring_metric: 'mean_squared_log_error'
    5:
      # general
      name: '-m workload.UseCase05'
      tables:
        - 'marketplace'
      raw_data_files:
        - 'marketplace.csv'
      label_column: 'price'
      delimiter: '|'
      # engines
      training_engine: *ENGINE
      serving_engine: *ENGINE
      # data stores
      training_datastore: *LOCAL_FS   # for storing the training data
      model_datastore: *LOCAL_FS      # for storing the trained models
      serving_datastore: *LOCAL_FS    # for storing the serving data
      output_datastore: *LOCAL_FS     # for storing the final output
      # templates
      datagen_template: 'java -jar $pdgf -ns -sf $scale_factor -s $table'
      training_template: *TRAINING_TEMPLATE
      serving_template: *SERVING_TEMPLATE
      # URLs
      training_data_url: *TRAINING_DATA_URL
      serving_data_url: *SERVING_DATA_URL
      scoring_data_url: *SCORING_DATA_URL
      model_url: 'output/model/uc05'
      output_url: 'output/output/uc05'
      scoring_output_url: 'output/scoring/uc05'
      scoring_metric: 'mean_squared_log_error'
    7:
      # general
      name: '-m workload.UseCase07'
      tables:
        - 'ProductRating'
      raw_data_files:
        - 'ProductRating.csv'
      label_column: 'rating'
      # engines
      training_engine: *ENGINE
      serving_engine: *ENGINE
      # data stores
      training_datastore: *LOCAL_FS   # for storing the training data
      model_datastore: *LOCAL_FS      # for storing the trained models
      serving_datastore: *LOCAL_FS    # for storing the serving data
      output_datastore: *LOCAL_FS     # for storing the final output
      # templates
      datagen_template: 'java -jar $pdgf -ns -sf $scale_factor -s $table'
      training_template: *TRAINING_TEMPLATE
      serving_template: *SERVING_TEMPLATE
      # URLs
      training_data_url: *TRAINING_DATA_URL
      serving_data_url: *SERVING_DATA_URL
      scoring_data_url: *SCORING_DATA_URL
      model_url: 'output/model/uc07'
      output_url: 'output/output/uc07'
      scoring_output_url: 'output/scoring/uc07'
      scoring_metric: 'median_absolute_error'
    8:
      # general
      name: '-m workload.UseCase08'
      tables:
        - 'orders'
      raw_data_files:
        - 'orders.csv'
      label_column: 'trip_type'
      labels: ['3', '4', '5', '6', '7', '8', '9', '12', '15', '18', '19', '20', '21', '22', '23', '24', '25', '26',
               '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43',
               '44', '999']
      # engines
      training_engine: *ENGINE
      serving_engine: *ENGINE
      # data stores
      training_datastore: *LOCAL_FS   # for storing the training data
      model_datastore: *LOCAL_FS      # for storing the trained models
      serving_datastore: *LOCAL_FS    # for storing the serving data
      output_datastore: *LOCAL_FS     # for storing the final output
      # templates
      datagen_template: 'java -jar $pdgf -ns -sf $scale_factor -s $table'
      training_template: *TRAINING_TEMPLATE
      serving_template: *SERVING_TEMPLATE
      # URLs
      training_data_url: *TRAINING_DATA_URL
      serving_data_url: *SERVING_DATA_URL
      scoring_data_url: *SCORING_DATA_URL
      model_url: 'output/model/uc08'
      output_url: 'output/output/uc08'
      scoring_output_url: 'output/scoring/uc08'
      scoring_metric: 'log_loss'
    10:
      # general
      name: '-m workload.UseCase10'
      tables:
        - 'FinancialTransactions'
        - 'FinancialCustomer'
      raw_data_files:
        - 'FinancialTransactions.csv'
        - 'FinancialCustomer.csv'
      label_column: 'isFraud'
      # engines
      training_engine: *ENGINE
      serving_engine: *ENGINE
      # data stores
      training_datastore: *LOCAL_FS   # for storing the training data
      model_datastore: *LOCAL_FS      # for storing the trained models
      serving_datastore: *LOCAL_FS    # for storing the serving data
      output_datastore: *LOCAL_FS     # for storing the final output
      # templates
      datagen_template: 'java -jar $pdgf -ns -sf $scale_factor -s $table'
      training_template: '$engine $name --stage training --workdir $output $input/FinancialCustomer.csv $input/FinancialTransactions.csv'
      serving_template: '$engine $name --stage serving --workdir $model $input/FinancialCustomer.csv $input/FinancialTransactions.csv'
      # URLs
      training_data_url: *TRAINING_DATA_URL
      serving_data_url: *SERVING_DATA_URL
      scoring_data_url: *SCORING_DATA_URL
      model_url: 'output/model/uc10'
      output_url: 'output/output/uc10'
      scoring_output_url: 'output/scoring/uc10'
      scoring_metric: 'accuracy_score'
    17:
      # general
      name: '-m workload.UseCase17'
      tables:
        - 'failures'
      raw_data_files:
        - 'failures.csv'
      label_column: 'failure'
      # engines
      training_engine: *ENGINE
      serving_engine: *ENGINE
      # data stores
      training_datastore: *LOCAL_FS   # for storing the training data
      model_datastore: *LOCAL_FS      # for storing the trained models
      serving_datastore: *LOCAL_FS    # for storing the serving data
      output_datastore: *LOCAL_FS     # for storing the final output
      # templates
      datagen_template: 'java -jar $pdgf -ns -sf $scale_factor -s $table'
      training_template: *TRAINING_TEMPLATE
      serving_template: *SERVING_TEMPLATE
      # URLs
      training_data_url: *TRAINING_DATA_URL
      serving_data_url: *SERVING_DATA_URL
      scoring_data_url: *SCORING_DATA_URL
      model_url: 'output/model/uc17'
      output_url: 'output/output/uc17'
      scoring_output_url: 'output/scoring/uc17'
      scoring_metric: 'f1_score'
    19:
      # general
      name: '-m workload.UseCase19'
      tables:
        - 'Review'
      raw_data_files:
        - 'Review.psv'
      label_column: "spam"
      delimiter: "|"
      # engines
      training_engine: *ENGINE
      serving_engine: *ENGINE
      # data stores
      training_datastore: *LOCAL_FS   # for storing the training data
      model_datastore: *LOCAL_FS      # for storing the trained models
      serving_datastore: *LOCAL_FS    # for storing the serving data
      output_datastore: *LOCAL_FS     # for storing the final output
      # templates
      datagen_template: 'java -jar $pdgf -ns -sf $scale_factor -s $table'
      training_template: *TRAINING_TEMPLATE
      serving_template: *SERVING_TEMPLATE
      # URLs
      training_data_url: *TRAINING_DATA_URL
      serving_data_url: *SERVING_DATA_URL
      scoring_data_url: *SCORING_DATA_URL
      model_url: 'output/model/uc19'
      output_url: 'output/output/uc19'
      scoring_output_url: 'output/scoring/uc19'
      scoring_metric: 'f1_score'
    90:
      # general
      name: "-m workload.UseCase90"
      tables:
        - "CUSTOMER_IMAGES"
        - "CUSTOMER_IMAGES_META"
      raw_data_files:
        - "CUSTOMER_IMAGES_META.csv"
      label_column: 'identity'
      # engines
      training_engine: *ENGINE
      serving_engine: *ENGINE
      # data stores
      training_datastore: *LOCAL_FS   # for storing the training data
      model_datastore: *LOCAL_FS      # for storing the trained models
      serving_datastore: *LOCAL_FS    # for storing the serving data
      output_datastore: *LOCAL_FS     # for storing the final output
      # templates
      datagen_template: "java -jar $pdgf -ns -sf $scale_factor -s $table"
      training_template: "$engine $name --stage training --pretrained --workdir $output $input/CUSTOMER_IMAGES"
      serving_template: "$engine $name --stage serving --pretrained  --workdir $model $input/CUSTOMER_IMAGES"
      # URLs
      training_data_url: *TRAINING_DATA_URL
      serving_data_url: *SERVING_DATA_URL
      scoring_data_url: *SCORING_DATA_URL
      model_url: "output/model/uc90"
      output_url: "output/output/uc90"
      scoring_output_url: "output/scoring/uc90"
      scoring_metric: "accuracy_score"
